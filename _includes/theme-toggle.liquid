<theme-toggle>
	<template>
		<style webc:keep>
			:host {
				display: grid;
				grid-auto-flow: column;
				grid-auto-columns: 1fr;
				gap: 4px;
			}

			button {
				display: flex;
				align-items: center;
				justify-content: center;
				gap: 0.5em;
				border: none;
				padding-block: 0.5em;
				color: var(--button-text);
				line-height: 1;
				background-color: var(--button-face, ButtonFace);

				transition-property: background-color, color, filter;
				transition-duration: 300ms;
				transition-timing-function: linear;
			}

			[aria-pressed=true] {
				background-color: var(--accent-color, AccentColor);
				color: var(--accent-color-text, AccentColorText);
			}

			[aria-pressed=false]:hover,
			[aria-pressed=false]:focus {
				background-color: var(--button-face-hover);
			}

			button > * {
				pointer-events: none;
			}

			svg {
				flex: 0 0 1.5em;
				aspect-ratio: 1;
			}
		</style>

		<button aria-pressed=false data-theme=light>
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<circle cx="12" cy="12" r="4"></circle>
				<path d="M12 2v2"></path>
				<path d="M12 20v2"></path>
				<path d="m4.93 4.93 1.41 1.41"></path>
				<path d="m17.66 17.66 1.41 1.41"></path>
				<path d="M2 12h2"></path>
				<path d="M20 12h2"></path>
				<path d="m6.34 17.66-1.41 1.41"></path>
				<path d="m19.07 4.93-1.41 1.41"></path>
			</svg>
			<span>Light</span>
		</button>

		<button aria-pressed=true data-theme=system>
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<rect x="3" y="4" width="18" height="12" rx="2" ry="2"></rect>
				<line x1="2" y1="20" x2="22" y2="20"></line>
			</svg>
			<span>System</span>
		</button>

		<button aria-pressed=false data-theme=dark>
			<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<path d="M12 3a6.364 6.364 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
			</svg>
			<span>Dark</span>
		</button>
	</template>
</theme-toggle>

{% js "defer" %}
customElements.define(
	"theme-toggle",
	class ThemeToggle extends HTMLElement {
		constructor() {
			super();
			this.attachShadow({ mode: "open" });
		}

		connectedCallback() {
			const template = this.querySelector(":scope > template");
			this.shadowRoot.appendChild(template.content);
			this.shadowRoot.addEventListener("click", this.clickedCallback)

			const currentTheme = window.getTheme();
			this.update(currentTheme);
		}

		disconnectedCallback() {
			this.shadowRoot.removeEventListener("click", this.clickedCallback);
		}

		clickedCallback = (event) => {
			if (event.target.nodeName !== "BUTTON") return;
			const theme = event.target.dataset["theme"];
			this.update(theme);
			window.toggleTheme(theme);
		}

		update(theme) {
			const buttonList = this.shadowRoot.querySelectorAll("[aria-pressed]");
			for (const btn of buttonList) {
				btn.setAttribute(
					"aria-pressed", btn.dataset["theme"] === theme ? "true" : "false"
				);
			}
		}
	}
);
{% endjs %}

{% css %}
	theme-toggle {
		--button-face: var(--surface-2);
		--button-face-hover: var(--surface-3);
		--button-border: var(--surface-2);
		--button-text: var(--text-1);
		--accent-color: var(--primary-1);
		--accent-color-text: var(--surface-1);
		--gap: var(--space-s);
	}
{% endcss %}
