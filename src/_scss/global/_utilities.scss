@use "sass:map";
@use "../mixins/typography" as type;
@use "./tokens";

$-config: (
  (
    "tokens": "color",
    "utilities": (
      "bg": "background-color",
      "color": "color"
    )
  ),
  (
    "tokens": "font",
    "utilities": (
      "font": "font-family"
    )
  ),
  (
    "tokens": "line-height",
    "utilities": (
      "line": "line-height"
    )
  ),
  (
    "tokens": "space",
    "prefix": "gap",
    "utilities": (
      "bottom": "margin-bottom",
      "left": "margin-left",
      "right": "margin-right",
      "top": "margin-top"
    )
  ),
  (
    "tokens": "space",
    "prefix": "pad",
    "utilities": (
      "bottom": "padding-bottom",
      "left": "padding-left",
      "right": "padding-right",
      "top": "padding-top"
    )
  ),
  (
    "tokens": "space",
    "utilities": (
      "flow-sp": "--flow-sp"
    )
  )
);

$-min-text: tokens.get("type", "min-step");
$-max-text: tokens.get("type", "max-step");
@for $i from $-min-text through $-max-text {
  .size-#{$i} {
    @include type.font-size($i);
  }
}

@each $group in $-config {
  $toks: tokens.get(map.get($group, "tokens"));
  $utils: map.get($group, "utilities");
  $prefix: "";

  @if (map.has-key($group, "prefix")) {
    $prefix: #{map.get($group, "prefix")}-;
  }

  @each $name, $prop in $utils {
    @each $key, $val in $toks {
      .#{$prefix}#{$name}-#{$key} {
        #{$prop}: $val;
      }
    }
  }
}
