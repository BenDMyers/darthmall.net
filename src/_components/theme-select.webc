<template>
	<style>
		:host {
			contain: content;

			display: grid;
			grid-auto-flow: column;
			grid-auto-columns: 1fr;
			gap: 0.25ch;

			background-color: var(--button-border);
		}

		:host,
		button {
			/* This should be large enough to create a rounded pill effect */
			border-radius: 2em;
		}

		button {
			container: toggle / inline-size;
			display: flex;
			align-items: center;
			justify-content: center;
			gap: 0.5em;
			border: none;
			padding-block: 0.5em;
			color: var(--button-text);
			line-height: 1;
			background-color: var(--button-face, transparent);

			transition-property: background-color, color;
			transition-duration: 300ms;
			transition-timing-function: ease;
		}

		[aria-pressed=false]:hover {
			background-color: var(--button-face-hover);
		}

		[aria-pressed=true] {
			color: var(--accent-color-text, AccentColorText);
			background-color: var(--accent-color, AccentColor);
		}

		button > * {
			pointer-events: none;
		}

		button > span {
			clip: rect(0 0 0 0);
			clip-path: inset(50%);
			height: 1px;
			overflow: hidden;
			position: absolute;
			white-space: nowrap;
			width: 1px;
		}

		svg {
			flex: 0 0 1.5em;
			aspect-ratio: 1;
		}

		@container (min-width: 7.2em) {
			button {
				padding-inline: 1.5em;
			}
			button > span {
				clip: unset;
				clip-path: unset;
				height: unset;
				overflow: unset;
				position: unset;
				white-space: unset;
				width: unset;
			}
		}
	</style>
	<button aria-pressed=false data-theme=light>
		<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<circle cx="12" cy="12" r="4"></circle>
			<path d="M12 2v2"></path>
			<path d="M12 20v2"></path>
			<path d="m4.93 4.93 1.41 1.41"></path>
			<path d="m17.66 17.66 1.41 1.41"></path>
			<path d="M2 12h2"></path>
			<path d="M20 12h2"></path>
			<path d="m6.34 17.66-1.41 1.41"></path>
			<path d="m19.07 4.93-1.41 1.41"></path>
		</svg>
		<span>Light</span>
	</button>

	<button aria-pressed=true data-theme=system>
		<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<rect x="3" y="4" width="18" height="12" rx="2" ry="2"></rect>
			<line x1="2" y1="20" x2="22" y2="20"></line>
		</svg>
		<span>System</span>
	</button>

	<button aria-pressed=false data-theme=dark>
		<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<path d="M12 3a6.364 6.364 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
		</svg>
		<span>Dark</span>
	</button>
</template>

<script>
customElements.define(
	"theme-select",
	class ThemeSelect extends HTMLElement {
		static #THEME_KEY = "theme-preference";

		constructor() {
			super();
			this.attachShadow({ mode: "open" });
		}

		connectedCallback() {
			const template = this.querySelector(":scope > template");
			this.shadowRoot.appendChild(template.content);
			this.shadowRoot.addEventListener("click", this.clickedCallback)
		}

		disconnectedCallback() {
			this.shadowRoot.removeEventListener("click", this.clickedCallback);
		}

		clickedCallback = (event) => {
			if (event.target.nodeName !== "BUTTON") return;
			this.shadowRoot
				.querySelector("[aria-pressed=true]")
				.setAttribute("aria-pressed", "false");
			event.target.setAttribute("aria-pressed", "true");
			this.#toggleTheme(event.target.dataset["theme"]);
		}

		#toggleTheme(theme) {
			if (theme === "system") {
				document.documentElement.removeAttribute("data-theme");
				localStorage.removeItem(ThemeSelect.#THEME_KEY);
			} else {
				document.documentElement.dataset.theme = theme;
				localStorage.setItem(ThemeSelect.#THEME_KEY, theme);
			}

			document
				.querySelectorAll('link[href*="/css/prism"]')
				.forEach(function (link) {
					const media = link.getAttribute("media");

					if (
						theme === "dark" ||
						(theme === "system" && media === "(prefers-color-scheme: dark)")
					) {
						link.href = link.href.replace("prism.css", "prism-tomorrow.css");
					} else {
						link.href = link.href.replace("prism-tomorrow.css", "prism.css");
					}
				});
		}
	}
);
</script>

<style>
	theme-select {
		--button-face-hover: var(--surface-3);
		--button-border: var(--surface-2);
		--button-text: var(--text-1);
		--accent-color: var(--primary-1);
		--accent-color-text: var(--surface-1);
	}
</style>
