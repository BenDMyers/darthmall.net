const crypto = require("crypto");
const path = require("path");

const glob = require("glob");
const sass = require("sass");
const jsonImporter = require("node-sass-json-importer");

module.exports = function styles() {
  return glob
    .sync("src/_scss/[^_]*.scss")
    .map(function (file) {
      const baseName = path.basename(file, ".scss"),
        fileName = `${baseName}.css`;

      const output = sass.renderSync({
        file,
        outFile: fileName,
        importer: [jsonImporter()],
        outputStyle: "compressed",
        sourceMap: true,
      });

      const content = output.css.toString("utf8"),
        hash = crypto.createHash("md5");

      hash.update(content);

      const hashedFileName = `${baseName}-${hash.digest("hex").slice(0, 10)}.css`;

      // The first entry is the CSS, the second is the sourcemap for the CSS.
      // The sourcemap has the same value for the filename and the hashed
      // filename because it has to match the comment generated by sass, and
      // we're not worried about cache busting source maps. It doesn't matter
      // what the name of the sourcemap is, as long as it matches the path in
      // the sourcemap comment of the compressed CSS.
      return [
        {
          fileName,
          hashedFileName,
          content,
        },
        {
          fileName: `${fileName}.map`,
          hashedFileName: `${fileName}.map`,
          content: output.map.toString("utf8"),
        },
      ];
    })
    .reduce((a, b) => a.concat(b), []);
};
